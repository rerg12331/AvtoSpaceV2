import telebot
import json
import datetime
from telebot import types
from fastapi import FastAPI, Request
from config import token, api_key
from bot.get_locations import get_nearest_gas_stations_yandex
from bot.key_board_menu import generate_menu
from requests.exceptions import ConnectionError, Timeout, RequestException
from bot.db import session, User, Location

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
bot = telebot.TeleBot(token)
app = FastAPI()

# –í–µ–±—Ö—É–∫ –¥–ª—è Telegram
@app.post(f"/{token}")
async def process_webhook(request: Request):
    json_str = await request.body()
    update = telebot.types.Update.de_json(json_str.decode('utf-8'))
    bot.process_new_updates([update])
    return {"status": "ok"}

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def main(message):
    existing_user = session.query(User).filter_by(user_id=message.from_user.id).first()
    if existing_user is None:
        date_time = datetime.datetime.fromtimestamp(message.date)
        new_user = User(
            user_id=message.from_user.id,
            name=message.from_user.first_name,
            username=message.from_user.username,
            chat_id=message.chat.id,
            location_latitude=None,
            location_longitude=None,
            date_registered=date_time.strftime('%Y-%m-%d %H:%M:%S')
        )
        session.add(new_user)
        session.commit()

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    search = types.KeyboardButton('üîé –ù–∞–π—Ç–∏ –∑–∞–ø—Ä–∞–≤–∫—É', request_location=True)
    markup.row(search)
    bot.reply_to(message, 
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>AvtoSpace</b> ‚Äî –ü–æ–∏—Å–∫ –±–µ–Ω–∑–∏–Ω–æ–≤—ã—Ö –∏ —ç–ª–µ–∫—Ç—Ä–æ–∑–∞–ø—Ä–∞–≤–æ–∫! üöó‚ö°Ô∏è\n\n"
        "–Ø –≤–∞—à –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –±—ã—Å—Ç—Ä–æ –∏ –ª–µ–≥–∫–æ –Ω–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à–∏–µ –ê–ó–°.\n\n"
        "–° <b>AvtoSpace</b> –≤—ã —Å–º–æ–∂–µ—Ç–µ:\n\n"
        "<em><u>‚Ä¢ –ù–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à–∏–µ –±–µ–Ω–∑–∏–Ω–æ–≤—ã–µ –∏ —ç–ª–µ–∫—Ç—Ä–æ–∑–∞–ø—Ä–∞–≤–∫–∏.</u></em>\n"
        "<em><u>‚Ä¢ –£–∑–Ω–∞—Ç—å —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã –Ω–∞ —Ç–æ–ø–ª–∏–≤–æ –∏ –∑–∞—Ä—è–¥–Ω—ã–µ —Å—Ç–∞–Ω—Ü–∏–∏.</u></em>\n"
        "<em><u>‚Ä¢ –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç–∞–Ω—Ü–∏–∏.</u></em>\n\n"
        "–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º –≤–∞—à–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ —Å –∫–æ–º—Ñ–æ—Ä—Ç–∞ –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é! –ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ, —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ, –∏ —è –ø–æ–º–æ–≥—É –≤–∞–º –Ω–∞–π—Ç–∏ –ª—É—á—à—É—é –∑–∞–ø—Ä–∞–≤–∫—É.",
        parse_mode='html',
        reply_markup=markup
    )

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–æ–∫–∞—Ü–∏–∏
@bot.message_handler(content_types=['location'])
def location(message):
    user = session.query(User).filter_by(user_id=message.from_user.id).first()
    if user:
        user.location_latitude = message.location.latitude
        user.location_longitude = message.location.longitude
        session.commit()

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    benz = types.KeyboardButton('‚õΩÔ∏è –ë–µ–Ω–∑–∏–Ω–æ–≤—ã–µ')
    elecro = types.KeyboardButton('‚ö°Ô∏è –≠–ª–µ–∫—Ç—Ä–æ')
    markup.row(benz, elecro)
    bot.send_message(message.chat.id, reply_markup=markup)

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(content_types=['text'])
def handle_text(message):
    if message.text in ['‚õΩÔ∏è –ë–µ–Ω–∑–∏–Ω–æ–≤—ã–µ', '‚ö°Ô∏è –≠–ª–µ–∫—Ç—Ä–æ']:
        user = session.query(User).filter_by(user_id=message.from_user.id).first()
        text = "–ó–∞–ø—Ä–∞–≤–∫–∞" if message.text == "‚õΩÔ∏è –ë–µ–Ω–∑–∏–Ω–æ–≤—ã–µ" else "–≠–ª–µ–∫—Ç—Ä–æ–∑–∞–ø—Ä–∞–≤–∫–∞"
        info = get_nearest_gas_stations_yandex(api_key, user.location_latitude, user.location_longitude, text)

        user_locations = session.query(Location).filter_by(user_id=message.from_user.id).first()
        if user_locations is None:
            new_location = Location(user_id=message.from_user.id, data=info)
            session.add(new_location)
            session.commit()
        else:
            user_locations.data = info
            session.commit()

        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø—Ä–∞–≤–∫—É:", reply_markup=generate_menu(start_index=0, items=info))

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
@bot.callback_query_handler(func=lambda call: call.data.startswith('item_') or call.data.startswith('next_') or call.data.startswith('back_'))
def handle_callback(call):
    location = session.query(Location).filter_by(user_id=call.from_user.id).first()
    info = location.data
    if call.data.startswith("item_"):
        item_index = int(call.data.split("_")[1])
        bot.answer_callback_query(call.id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {info[item_index]['name']}")
        info_text = (
            f"‚ö°Ô∏è: <b>{info[item_index]['name']}</b>\n\n"
            f"üìç <b>–ê–¥—Ä–µ—Å</b>: <code>{info[item_index]['address']}</code>\n\n"
            f"üïí <b>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã</b>: {info[item_index]['hours']}\n\n"
            f"‚òéÔ∏è <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã</b>: <code>{info[item_index]['phone']}</code>\n\n"
            f"üë£ <b>–ù–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏</b>: {info[item_index]['distance']} km"
        )
        inline_keyboard = types.InlineKeyboardMarkup()
        location_button = types.InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–∫–∞—Ü–∏—é", callback_data=f"show-location_{item_index}")
        inline_keyboard.row(location_button)
        bot.send_message(call.message.chat.id, info_text, parse_mode="HTML", reply_markup=inline_keyboard)

    elif call.data.startswith("next_"):
        start_index = int(call.data.split("_")[1]) + 5
        bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=generate_menu(start_index, items=info))
    elif call.data.startswith("back_"):
        start_index = int(call.data.split("_")[1]) - 5
        bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=generate_menu(start_index, items=info))

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏
@bot.callback_query_handler(func=lambda call: call.data.startswith('show-location_'))
def show_location_handler(call):
    location = session.query(Location).filter_by(user_id=call.from_user.id).first()
    info = location.data
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    search = types.KeyboardButton('üîé –ù–∞–π—Ç–∏ –∑–∞–ø—Ä–∞–≤–∫—É', request_location=True)
    markup.row(search)
    item_index = int(call.data.split("_")[1])
    bot.send_location(call.message.chat.id, info[item_index]['coordinates'][1], info[item_index]['coordinates'][0], reply_markup=markup)

# –ó–∞–ø—É—Å–∫ FastAPI –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±—Ö—É–∫–æ–≤
if __name__ == "__main__":
    import uvicorn
    import os

    port = int(os.environ.get('PORT', 8000))
    WEBHOOK_URL = f"https://<your-app-url>/{token}"

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫
    bot.remove_webhook()
    bot.set_webhook(url=WEBHOOK_URL)

    # –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    uvicorn.run(app, host="0.0.0.0", port=port)
